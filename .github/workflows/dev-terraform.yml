name: 'dev-terraform'

on:
  push:
    branches: [ "master" ]
    paths:
      - 'dev/**'
  pull_request:
    branches:
      - master
    paths:
      - 'dev/**'

permissions:
  id-token: write
  issues: write
  pull-requests: write
  contents: read
  

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
#      with:
#        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Configure AWS Credentials
      if: github.ref == 'refs/heads/master'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      if: github.ref == 'refs/heads/master'
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      if: github.ref == 'refs/heads/master'
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: github.ref == 'refs/heads/master'
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
     
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
